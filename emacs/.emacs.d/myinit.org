#+STARTIP: overview
#+TITLE: Emacs configuration.
#+Author: ymdatta
* Notes:
  - Output of described font:

    Some good fonts: Dejavu Sans Mono Book: Size: 9

name (opened by): -SRC-Hack-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1
       full name: Hack:pixelsize=12:foundry=SRC:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
       file name: /home/mohanadatta/.fonts/Hack-Regular.ttf
            size: 12
          height: 15
 baseline-offset:  0
relative-compose:  0
  default-ascent:  0
          ascent: 12
         descent:  3
   average-width:  7
     space-width:  7
       max-width:  7

* Initial setup

  #+BEGIN_SRC emacs-lisp
    ;;  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    ;;  (load-theme 'midnight t)

    ;; Column numbers
    (setq column-number-mode t)

    ;; Show paranthesis Mode
    ;; By default, there is a delay before showing
    ;; paranthesis. It can be deactivated by the
    ;; following line. It should be done before
    ;; activating show-paren mode.

    (setq show-paren-delay 0) ;; How long to wait
    (show-paren-mode t) ;; turn paren-mode on

    ;; Set fill-column as 80.
    ;; This sets the right margin to 80. Now, when
    ;; M-q (i.e fill paragraph) is used, it will
    ;; take the paragraph and fill all the words
    ;; such that line breaks are removed from short
    ;; lines and new line breaks are inserted before
    ;; words that cross the right margin.

    ;; Reference: https://www.emacswiki.org/emacs/FillParagraph

    (setq-default fill-column 80)
  #+END_SRC

  #+RESULTS:
  : 80

* Interface tweaks

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)

    ;; Disable menu bar, tool bar, scroll bar mode.
    ;; Refer: https://git.sr.ht/~technomancy/better-defaults/tree/master/better-defaults.el
    (unless (eq window-system 'ns)
      (menu-bar-mode -1))
    (when (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))

    ;;Everytime yes or no option is changed to y or n.
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  #+RESULTS:
  : y-or-n-p

* Terminal configuration
  Taken from [[(prefer-coding-system 'utf-8)%0A(set-default-coding-systems 'utf-8)%0A(set-terminal-coding-system 'utf-8)%0A(set-keyboard-coding-system 'utf-8)%0A;; backwards compatibility as default-buffer-file-coding-system%0A;; is deprecated in 23.2.%0A(if (boundp 'buffer-file-coding-system)%0A    (setq-default buffer-file-coding-system 'utf-8)%0A  (setq default-buffer-file-coding-system 'utf-8))%0A%0A;; Treat clipboard input as UTF-8 string first; compound text next, etc.%0A(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))][Working with coding systems and unicode in Emacs]]
  #+BEGIN_SRC emacs-lisp
    ;;set the coding systems the terminal uses
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    ;; backwards compatibility as default-buffer-file-coding-system
    ;; is deprecated in 23.2.
    (if (boundp 'buffer-file-coding-system)
	(setq-default buffer-file-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8))

    ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  #+END_SRC

  #+RESULTS:
  | UTF8_STRING | COMPOUND_TEXT | TEXT | STRING |

* try

  As the name suggests, try a package before installing it!
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

  #+RESULTS:

* dead xgrip
** Reason for using this:
   Deadgrip is an excellent tool to search for words in files.
   The reason i am preferring this over rgrep is that sometimes,
   it doesn't show the matched items in the rgrep buffer.
   (I may be missing something here, but dead xgrip is so good
   to ignore what i missed)

   This sounded like a good alternative. I have used it on big
   codebase like linux-kernel, it worked pretty well.

   #+BEGIN_SRC emacs-lisp
     (use-package deadgrep
       :ensure t)
   #+END_SRC

   #+RESULTS:

* which-key

  Brings up some help

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode 1))
  #+END_SRC

  #+RESULTS:
  : t

* Org mode

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))


    ;;For org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t) (gnuplot . t)))
    ;; add additional languages with '((language . t)))

    ;; Change org-plot/gnuplot key
    (local-set-key "\M-\C-g" 'org-plot/gnuplot)

    ;; beamer: A LaTex class for producing presentations
    ;; (use-package ox-beamer
    ;;   :ensure t)

    ;; org-reveal: Exports org-mode contents to Reveal.js HTML presentation
    (use-package ox-reveal
      :ensure t
      :config
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t))

    (use-package htmlize
      :ensure t)

  #+END_SRC

  #+RESULTS:

* Swiper/Ivy/Counsel
  Swiper gives us a really efficient incremental search with regular
  expressions and Ivy/Counsel replace a lot of ido or helms completion
  functionality.

  (Looks like counsel is requiremnt for swiper!)
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t)

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

  #+RESULTS:
  : counsel-find-file

* undo tree

  Better way to do undo/redo:
  Refer: [[http://www.dr-qubit.org/undo-tree/undo-tree.txt][http://www.dr-qubit.org/undo-tree/undo-tree.txt]] for documentation

  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :config (global-undo-tree-mode 1))
  #+END_SRC

  #+RESULTS:
  : t

* Flycheck

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC

  #+RESULTS:

* C language related configuration

  #+BEGIN_SRC emacs-lisp

    ;; Setting style to linux - what
    ;; the Linux developers use for kernel development
    (setq c-default-style "linux")

    ;; automatically indent when press RET
    (global-set-key (kbd "RET") 'newline-and-indent)

  #+END_SRC

  #+RESULTS:
  : newline-and-indent

* Magit

  #+BEGIN_SRC emacs-lisp

    ;; To display information about the Current Git repository,
    ;; 'M-x magit-status RET' is used. This is a basic command,
    ;; which is used a lot. So, this is given a global key
    ;; binding.

    ;; Taken from magit manual.
    (use-package magit
      :ensure t
      :config (global-set-key (kbd "C-x g") 'magit-status))
  #+END_SRC

  #+RESULTS:
  : t

* xkcd

  Nice package to view xkcd comic from emacs

  #+BEGIN_SRC emacs-lisp
    (use-package xkcd
      :ensure t)
  #+END_SRC

  #+RESULTS:

* ir-black-theme:

  A light-on-dark color theme adapted from Todd Werth's original Textmate theme.
  Github link: [[https://github.com/jmdeldin/ir-black-theme.el][jmeldin: ir-black-theme.el]]

  #+BEGIN_SRC emacs-lisp
    (use-package ir-black-theme
      :ensure t)
  #+END_SRC

  #+RESULTS:

* Connecting to docker containers

  Generally, whenever you login into the docker container, you need to install an editor
  in the container to work with the contents of the container. Many times, this becomes
  quite problematic, if your editor is a big one like emacs.

  The package *docker-tramp* helps in solving the problem. You can connect to docker
  containers easily with this package and modify the files in the container.

  #+BEGIN_SRC emacs-lisp
    (use-package docker-tramp
      :ensure t)
  #+END_SRC

  #+RESULTS:

* Update packages

  Update Emacs packages periodically.

  use-package's ensure will install a package if it's not already installed, but it does
  not keep it up-to-date. The *auto-package-update* package helps in solving that problem.

  #+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
       :ensure t
       :config
       (setq auto-package-update-delete-old-versions t)
       (setq auto-package-update-hide-results t)
       (auto-package-update-maybe))
  #+END_SRC

* Tags for browsing source code

  Using gtags, a front end to gnu global source code tagging system.

  *Important*

  Need to install global separately with ctags as described [[ https://github.com/yoshizow/global-pygments-plugin.git][here]] so that
  ggtags support ctags backend. (Have to compile source to do this)

  (Right now, on Ubuntu i just installed global package and am using ggtags
  mode as is, should investigate if the package is installed with
  exuberant ctags (i.e ctags))


  #+BEGIN_SRC emacs-lisp
    ;; (use-package ggtags
    ;;    :ensure t
    ;;    :config
    ;;    (setq auto-package-update-delete-old-versions t)
    ;;    (setq auto-package-update-hide-results t)
    ;;    (auto-package-update-maybe))
  #+END_SRC

  #+RESULTS:
  : t
* Windows-configuration
** Tramp configuration for remote shell

  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/usr/bin/bash")
  #+END_SRC

  #+RESULTS:
** Buffer file encoding system

   I found that when i had edited files in the emacs buffer
   on windows, an '\r' is added at the end of the lines.

   The bash was not able to recognize this and began to
   throw errors.

   The solution to this problem is to convert DOS/Windows
   newline characters to UNIX format.

  #+BEGIN_SRC emacs-lisp
    (setq set-buffer-encoding-system "unix")
  #+END_SRC

  #+RESULTS:
  : unix
** woman-manpath

   When 'man' mode is issued on remote server, it actually
   searches on the local machine for the asked man page.

   First install the man pages tarball on the windows.
   Extract the tarball into a folder called 'man' in
   Local Disk (C:)

   Set woman path so that it can access them.

  #+BEGIN_SRC emacs-lisp
    (setq woman-manpath '("C:/man"))
  #+END_SRC

   For more information on the womna-manpath variable,
   refer [[https://www.gnu.org/software/emacs/manual/html_node/woman/Interface-Options.html][here]].
